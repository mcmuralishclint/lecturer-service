// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "github.com/mcmuralishclint/personal_tutor/services/lecturer-service/domain"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: skill
func (_m *Repository) Create(skill domain.Skill) (domain.Skill, error) {
	ret := _m.Called(skill)

	var r0 domain.Skill
	if rf, ok := ret.Get(0).(func(domain.Skill) domain.Skill); ok {
		r0 = rf(skill)
	} else {
		r0 = ret.Get(0).(domain.Skill)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Skill) error); ok {
		r1 = rf(skill)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name_map
func (_m *Repository) Delete(name_map string) (bool, error) {
	ret := _m.Called(name_map)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name_map)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name_map)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: name_map
func (_m *Repository) Find(name_map string) domain.Skill {
	ret := _m.Called(name_map)

	var r0 domain.Skill
	if rf, ok := ret.Get(0).(func(string) domain.Skill); ok {
		r0 = rf(name_map)
	} else {
		r0 = ret.Get(0).(domain.Skill)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() []domain.Skill {
	ret := _m.Called()

	var r0 []domain.Skill
	if rf, ok := ret.Get(0).(func() []domain.Skill); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Skill)
		}
	}

	return r0
}
